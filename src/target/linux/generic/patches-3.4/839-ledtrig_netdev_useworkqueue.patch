--- a/drivers/leds/ledtrig-netdev.c
+++ b/drivers/leds/ledtrig-netdev.c
@@ -23,7 +23,7 @@
 #include <linux/spinlock.h>
 #include <linux/device.h>
 #include <linux/netdevice.h>
-#include <linux/timer.h>
+#include <linux/workqueue.h>
 #include <linux/ctype.h>
 #include <linux/leds.h>
 #include <linux/version.h>
@@ -76,10 +76,12 @@
 
 #define MAX_NETDEVS 8
 
+static struct workqueue_struct *netdev_trig_wq;
+
 struct led_netdev_data {
 	rwlock_t lock;
 
-	struct timer_list timer;
+	struct delayed_work netdev_trig_work;
 	struct notifier_block notifier;
 
 	struct led_classdev *led_cdev;
@@ -103,9 +105,9 @@ static void set_baseline_state(struct le
 		led_set_brightness(trigger_data->led_cdev, LED_OFF);
 
 	if ((trigger_data->mode & (MODE_TX | MODE_RX)) != 0 && trigger_data->link_up)
-		mod_timer(&trigger_data->timer, jiffies + trigger_data->interval);
+		queue_delayed_work(netdev_trig_wq, &trigger_data->netdev_trig_work,trigger_data->interval);
 	else
-		del_timer(&trigger_data->timer);
+		cancel_delayed_work(&trigger_data->netdev_trig_work);
 }
 
 static ssize_t led_device_name_show(struct device *dev,
@@ -421,9 +423,9 @@ done:
 }
 
 /* here's the real work! */
-static void netdev_trig_timer(unsigned long arg)
+static void netdev_trig_wq_handler(struct work_struct *work)
 {
-	struct led_netdev_data *trigger_data = (struct led_netdev_data *)arg;
+	struct led_netdev_data *trigger_data = container_of(work, struct led_netdev_data, netdev_trig_work.work);
 	struct rtnl_link_stats64 *dev_stats;
 	unsigned new_activity;
 	struct rtnl_link_stats64 temp;
@@ -475,7 +477,7 @@ static void netdev_trig_timer(unsigned l
 		}
 	}
 
-	mod_timer(&trigger_data->timer, jiffies + trigger_data->interval);
+	queue_delayed_work(netdev_trig_wq, &trigger_data->netdev_trig_work,trigger_data->interval);
 
 no_restart:
 	write_unlock(&trigger_data->lock);
@@ -495,8 +497,6 @@ static void netdev_trig_activate(struct
 	trigger_data->notifier.notifier_call = netdev_trig_notify;
 	trigger_data->notifier.priority = 10;
 
-	setup_timer(&trigger_data->timer, netdev_trig_timer, (unsigned long) trigger_data);
-
 	trigger_data->led_cdev = led_cdev;
 	trigger_data->interval = msecs_to_jiffies(50);
 	trigger_data->traffic_div_fact = 10;
@@ -519,6 +519,9 @@ static void netdev_trig_activate(struct
 		goto err_out_interval;
 
 	register_netdevice_notifier(&trigger_data->notifier);
+
+	INIT_DELAYED_WORK(&trigger_data->netdev_trig_work, netdev_trig_wq_handler);
+
 	return;
 
 err_out_interval:
@@ -538,6 +541,8 @@ static void netdev_trig_deactivate(struc
 	unsigned index;
 
 	if (trigger_data) {
+		cancel_delayed_work_sync(&trigger_data->netdev_trig_work);
+
 		unregister_netdevice_notifier(&trigger_data->notifier);
 
 		device_remove_file(led_cdev->dev, &dev_attr_device_name);
@@ -556,8 +561,6 @@ static void netdev_trig_deactivate(struc
 
 		write_unlock(&trigger_data->lock);
 
-		del_timer_sync(&trigger_data->timer);
-
 		kfree(trigger_data);
 	}
 }
@@ -570,12 +573,19 @@ static struct led_trigger netdev_led_tri
 
 static int __init netdev_trig_init(void)
 {
+	netdev_trig_wq = alloc_workqueue("netdev_trig_wq", WQ_HIGHPRI | WQ_UNBOUND, 1);
+	if (!netdev_trig_wq) {
+		printk("netdev_trig: alloc_workqueue failed\n");
+		return -EBUSY;
+	}
 	return led_trigger_register(&netdev_led_trigger);
 }
 
 static void __exit netdev_trig_exit(void)
 {
 	led_trigger_unregister(&netdev_led_trigger);
+	flush_workqueue(netdev_trig_wq);
+	destroy_workqueue(netdev_trig_wq);
 }
 
 module_init(netdev_trig_init);
